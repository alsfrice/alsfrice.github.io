<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript的浅拷贝与深拷贝]]></title>
    <url>%2F2019%2F07%2F26%2FJavaScript%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[123456let a = &#123; name: 'espoir'&#125;;let b = a;a.name = 'joker';console.log(b.name); // joker JavaScript中想要拷贝对象，不能简单的使用”=”进行赋值。我们可以使用深浅拷贝来实现这个需求。 浅拷贝在要拷贝的对象只有一层属性的时候，我们可以使用浅拷贝来拷贝对象。浅拷贝有多种方式，接下来会逐一介绍。 Object.assign 123456let a = &#123; name: 'espoir'&#125;;let b = Object.assign(&#123;&#125;, a);a.name = 'joker'console.log(b.name) // espoir 扩展运算符 (…) 123456let a = &#123; name: 'espoir'&#125;;let b = &#123;...a&#125;;a.name = 'joker';console.log(b.name) // espoir for-in循环 1234567891011121314const shallowClone = obj =&gt; &#123; let ret = Array.isArray(obj) ? [] : &#123;&#125;; // 判断传来的参数是否为对象，是否为空 if (!obj || typeof obj !== 'object' ) &#123; return; &#125; for (const i in obj) &#123; // 只拷贝自身属性 if (obj.hasOwnProperty(i)) &#123; ret[i] = obj[i]; &#125; &#125; return ret;&#125; 浅拷贝只是拷贝了对象的第一层属性，如果要拷贝的对象内还有对象时，两者又享有相同的引用。为此，我们需要引入深拷贝。 深拷贝 JSON.parse(JSON.stringfy(object))123const deepCloneByJSON = obj =&gt; &#123; return JSON.parse(JSON.stringify(obj));&#125; 这个方法虽然比较简便，但是也有其局限性： 会忽略 undefined 会忽略 Symbol 不能序列化函数 不能解决循环引用的对象 for-in递归循环123456789101112131415const deepClone = obj =&gt; &#123; let ret = Array.isArray(obj) ? [] : &#123;&#125;; // 判断传来的参数是否为对象，是否为空 if (!obj || typeof obj !== 'object' ) &#123; return; &#125; for (const i in obj) &#123; // 只拷贝自身属性 if (obj.hasOwnProperty(i)) &#123; // 判断子属性是否为对象，如果是，则进行递归拷贝 ret[i] = typeof obj[i] === 'object' ? deepClone(obj[i]) : obj[i] &#125; &#125; return ret;&#125; 这个方法可以解决JSON.parse(JSON.stringfy(object))方法的缺陷，但目前此方法也有自己缺陷。如Set,Map这种数据结构无法拷贝。 lodash函数库的深拷贝函数 lodash]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3的过渡与动画]]></title>
    <url>%2F2019%2F07%2F25%2FCSS3%E7%9A%84%E8%BF%87%E6%B8%A1%E4%B8%8E%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[过渡 (transition)过渡是元素从一种样式逐渐改变为另一种的效果。 过渡属性 属性 描述 transition 简写属性，用于在一个属性中设置四个过渡属性。 transition-property 规定应用过渡的CSS属性的名称。 transition-duration 定义过渡效果花费的时间。默认是0。 transition-timing-function 规定过渡效果的时间曲线。默认是“ease”。 transiton-delay 规定过渡效果何时开始。默认是0。 示例： 12// html&lt;img class="img1" src="https://alsfrice.github.io/images/espoir.jpg" alt="demo"&gt; 123456789101112/* css */.img1 &#123; border-radius: 50%; transition-property: transform; transition-duration: 2s; transition-timing-function: ease; transition-delay: 0;&#125; .img1:hover &#123; transform: rotate(360deg);&#125; 上面的例子可以使用简写的transition属性： 1234.img1 &#123; border-radius: 50%; transition: transform 2s;&#125; 效果： .img1 { border-radius: 50%; transition: transform 2s; } .img1:hover { transform: rotate(360deg); } 动画 (animation)动画是使元素从一种样式逐渐变化为另一种样式的效果。 动画属性 属性 描述 @keyframes 规定动画。 animation 所有动画属性的简写属性，除了 animation-play-state 属性。 animation-name 规定 @keyframes 动画的名称。 animation-duration 规定动画完成一个周期所花费的秒或毫秒。默认是 0。 animation-timing-function 规定动画的速度曲线。默认是 “ease”。 animation-fill-mode 规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式。 animation-delay 规定动画何时开始。默认是 0。 animation-iteration-count 规定动画被播放的次数。默认是 1。 animation-direction 规定动画是否在下一周期逆向地播放。默认是 “normal”。 animation-play-state 规定动画是否正在运行或暂停。默认是 “running”。 示例： 1&lt;img class="img2" src="https://alsfrice.github.io/images/espoir.jpg" alt="demo"&gt; 12345678910111213.img2 &#123; border-radius: 50%; animation-name: demo; animation-duration: 10s; animation-timing-function: linear; animation-iteration-count: infinite;&#125;@keyframes demo &#123; 0% &#123; transform: rotate(0deg); transform-origin: 100% 50%; &#125; 50% &#123; transform: rotate(360deg); transform-origin: 100% 50%; &#125; 51% &#123; transform-origin: 0% 50%; &#125; 100% &#123; transform: rotate(0deg); transform-origin: 0% 50%; &#125;&#125; 上面的例子可以使用简写的animation属性： 1234.img2 &#123; border-radius: 50%; animation: demo 10s linear infinite;&#125; 效果：播放&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;暂停 .img2 { border-radius: 50%; animation: demo 10s linear infinite; } @keyframes demo { 0% { transform: rotate(0deg); transform-origin: 100% 50%; } 50% { transform: rotate(360deg); transform-origin: 100% 50%; } 51% { transform-origin: 0% 50%; } 100% { transform: rotate(0deg); transform-origin: 0% 50%; } } .animation { color: #7cacef; font-size: 1.2em; background: none; border: none; letter-spacing: .2em; } .animation:hover { color: #7cacef; opacity: .5; } 区别 transition 提供了从一种状态过渡到另一种状态的改变。 animation 则可以从不同关键帧上设置多个过渡点。 可以理解为一个animation由多个transition组成，即transition是animation的一个子集。]]></content>
      <categories>
        <category>HTML/CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript的防抖和节流]]></title>
    <url>%2F2019%2F07%2F24%2FJavaScript%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%2F</url>
    <content type="text"><![CDATA[JavaScript的防抖和节流浏览器中scroll事件的handle会高频率的触发，如果在类似的频繁的事件回调中做复杂计算，很有可能导致页面卡顿。针对此类高频率触发事件的问题，JS中一般采用防抖和节流这两种方法解决。 防抖防抖的作用是在一定时间内，规定函数被执行的次数。实现如下： 123456789101112131415161718192021222324252627282930313233343536373839/** * 防抖函数，返回函数频繁调用时，空间时间必须大于或等于wait，fn才会执行 * * @param &#123;function&#125; fn * @param &#123;number&#125; wait * @param &#123;boolean&#125; immediate * @return &#123;function&#125; */const debounce = (fn, wait = 50, immediate = true) =&gt; &#123; let timer, context, args; // 延迟执行函数 const later = () =&gt; setTimeout(() =&gt; &#123; timer = null; if (!immediate) &#123; fn.apply(context, args); context = args = null; &#125; &#125;, wait); return function(...params) &#123; // 如果未创建延迟执行函数(later)，就创建一个 if (!timer) &#123; timer = later() // 如果是立即执行，调用函数 // 否则缓存上下文和参数 if (immediate) &#123; fn.apply(this, params); &#125; else &#123; context = this; args = params; &#125; &#125; else &#123; clearTimeout(timer); timer = later(); &#125; &#125;&#125; 节流节流的作用是规定函数每隔一段时间执行一次。实现如下： 1234567891011121314151617181920212223/** * 节流函数 * * @param &#123;function&#125; fn * @param &#123;number&#125; wait * @param &#123;number&#125; mustRun mustRun 毫秒内，必然会触发一次 handler */const throttle = (fn, wait, mustRun) =&gt; &#123; let timer = null, startTime = new Date(); return function(...args) &#123; let context = this, now = new Date(); clearTimeout(timer); // 时间间隔超过mustRun，执行fn if (now - startTime &gt;= mustRun) &#123; fn.apply(context, args); startTime = now; &#125; else &#123; timer = setTimeout(fn, wait); &#125; &#125;&#125; 引用大佬文章里面的话： 防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数wait）调用函数。 防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript异步执行的几种方式]]></title>
    <url>%2F2019%2F07%2F08%2FJavaScript%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[setTimeout() / setInterval() 123setTimeout(func, 0&#125;// HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。 setImmediate() 12setImmediate(func)// Node API process.nextTick() 12process.nextTick(func)// Node API Promise 12345new Promise(resolve =&gt; &#123; // code resolve()&#125;) .then(func) Generator 1234567891011function *gen() &#123; yield 1 yield 2 yield 3&#125;let g = gen()g.next() // &#123;value: 1, done: false&#125;g.next() // &#123;value: 2, done: false&#125;g.next() // &#123;value: 3, done: false&#125;g.next() // &#123;value: undefined, done: true&#125; async/await 1234567891011121314151617181920212223242526function fn1() &#123; console.log('Function1')&#125;function fn2() &#123; return new Promise(resolve =&gt; &#123; console.log('Function2') resolve() &#125;)&#125;function fn3() &#123; console.log('Function3')&#125;async function asyncFn() &#123; fn1() await fn2() fn3()&#125;asyncFn()// Function1// Function2// Function3]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js C++插件]]></title>
    <url>%2F2019%2F07%2F05%2FNode.js%20C%2B%2B%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[在看《深入浅出Node.js》一书学习Node.js之时，根据书中的内容写C++扩展。念于此书年代过于久远，书中的部分代码已经过时了。写此文章，谨记学习路上踩过的坑。 用C++编写一个简单的”Hello World”插件，功能很简单，就是返回一个”Hello world!”字符串，相当于以下的JavaScript代码： 1module.exports.hello = () =&gt; 'Hello world!' 新建hello目录作为自己的项目文件夹，编写hello.cc并将其存储到src目录下，代码如下： 1234567891011121314151617181920212223242526#include &lt;node.h&gt;namespace demo &#123;using v8::FunctionCallbackInfo;using v8::Isolate;using v8::Local;using v8::Object;using v8::String;using v8::Value;// 实现预定义的方法void Method(const FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123; Isolate* isolate = args.GetIsolate(); args.GetReturnValue().Set(String::NewFromUtf8(isolate, "Hello world!"));&#125;// 初始化函数void init(Local&lt;Object&gt; exports) &#123; NODE_SET_METHOD(exports, "sayHello", Method);&#125;// 调用NODE_MODULE()将注册方法定义到内存中，注：NODE_MODULE后面没有分号，因为它不是一个函数NODE_MODULE(NODE_GYP_MODULE_NAME, init)&#125; 写好C++扩展模块，还需要进行编译。工具使用node-gyp即可，安装方式可用npm或yarn: 1npm install -g node-gyp 或 1yarn global add node-gyp 安装完毕还需要写好.gyp项目文件，node-gyp约定.gyp文件为binding.gyp。它使用一个类似 JSON 的格式来描述模块的构建配置。 内容如下： 12345678&#123; 'targets': [ &#123; 'target_name': 'hello', 'sources': ['src/hello.cc'] &#125; ]&#125; 然后调用： 1node-gyp configure 为当前平台生成相应的项目构建文件。这会在 build/ 目录下生成一个 Makefile 文件（在 Unix 平台上）或 vcxproj 文件（在 Windows 上）。下一步，调用： 1node-gyp build 生成编译后的 hello.node 的文件。 它会被放进 build/Release/ 目录。 在hello目录下编写hello.js，代码如下： 123const hello = require('./build/Release/hello.node')console.log(hello.sayHello()) 调用： 123node hello.js// 打印：Hello world!]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[水平居中]]></title>
    <url>%2F2018%2F09%2F05%2F%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[行内元素 我们在实际工作中常会遇到需要设置水平居中的场景，比如为了美观，文章的标题一般都是水平居中显示的。 这里我们又得分两种情况：行内元素 还是 块状元素 ，块状元素里面又分为定宽块状元素，以及不定宽块状元素。今天我们先来了解一下行内元素怎么进行水平居中？ 如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的。(父元素和子元素：如下面的html代码中，div是“我想要在父容器中水平居中显示”这个文本的父元素。反之这个文本是div的子元素 )如下代码： html代码： 123&lt;body&gt; &lt;div class="txtCenter"&gt;我想要在父容器中水平居中显示。&lt;/div&gt;&lt;/body&gt; css代码： 12345&lt;style&gt;.txtCenter&#123; text-align: center;&#125;&lt;/style&gt; 定宽块状元素 当被设置元素为 块状元素 时用 text-align：center 就不起作用了，这时也分两种情况：定宽块状元素和不定宽块状元素。 这一小节我们先来讲一讲定宽块状元素。(定宽块状元素：块状元素的宽度width为固定值。) 满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。我们来看个例子就是设置 div 这个块状元素水平居中： html代码： 123&lt;body&gt; &lt;div&gt;我是定宽块状元素，哈哈，我要水平居中显示。&lt;/div&gt;&lt;/body&gt; css代码： 12345678&lt;style&gt;div&#123; border: 1px solid red;/*为了显示居中效果明显为 div 设置了边框*/ width: 200px;/*定宽*/ margin: 20px auto;/* margin-left 与 margin-right 设置为 auto */&#125;&lt;/style&gt; 也可以写成： 12margin-left: auto;margin-right: auto; 注意：元素的“上下 margin” 是可以随意设置的。 不定宽块状元素方法 在实际工作中我们会遇到需要为“不定宽度的块状元素”设置居中，比如网页上的分页导航，因为分页的数量是不确定的，所以我们不能通过设置宽度来限制它的弹性。(不定宽块状元素：块状元素的宽度width不固定。) 不定宽度的块状元素有三种方法居中（这三种方法目前使用的都很多）： 加入 table 标签 设置 display: inline 方法：与第一种类似，显示类型设为 行内元素，进行不定宽元素的属性设置 设置 position:relative 和 left:50%：利用 相对定位 的方式，将元素向左偏移 50% ，即达到居中的目的这一小节我们来讲一下第一种方法： 为什么选择方法一加入table标签? 是利用table标签的长度自适应性—即不定义其长度也不默认父元素body的长度（table其长度根据其内文本长度决定），因此可以看做一个定宽度块元素，然后再利用定宽度块状居中的margin的方法，使其水平居中。 第一步：为需要设置的居中的元素外面加入一个 table 标签 ( 包括 &lt;tbody&gt;、&lt;tr&gt;、&lt;td&gt; )。 第二步：为这个 table 设置“左右 margin 居中”（这个和定宽块状元素的方法一样）。 举例如下： html代码： 12345678910111213&lt;div&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt; &lt;ul&gt; &lt;li&gt;我是第一行文本&lt;/li&gt; &lt;li&gt;我是第二行文本&lt;/li&gt; &lt;li&gt;我是第三行文本&lt;/li&gt; &lt;/ul&gt; &lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; css代码： 123456&lt;style&gt;table &#123; border: 1px solid; margin: 0 auto;&#125;&lt;/style&gt; 除了上一节讲到的插入table标签，可以使不定宽块状元素水平居中之外，本节介绍第2种实现这种效果的方法，改变元素的display类型为行内元素，利用其属性直接设置。 第二种方法：改变块级元素的 display 为 inline 类型（设置为 行内元素 显示），然后使用 text-align:center 来实现居中效果。如下例子： html代码： 123456789&lt;body&gt;&lt;div class="container"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;/body&gt; css代码： 1234567891011121314151617&lt;style&gt;.container&#123; text-align:center;&#125;/* margin:0;padding:0（消除文本与div边框之间的间隙）*/.container ul&#123; list-style:none; margin:0; padding:0; display:inline;&#125;/* margin-right:8px（设置li文本之间的间隔）*/.container li&#123; margin-right:8px; display:inline;&#125;&lt;/style&gt; 这种方法相比第一种方法的优势是不用增加无语义标签，但也存在着一些问题：它将块状元素的 display 类型改为 inline，变成了行内元素，所以少了一些功能，比如设定长度值。 除了前两节讲到的插入table标签，以及改变元素的display类型，可以使不定宽块状元素水平居中之外，本节介绍第3种实现这种效果的方法，设置浮动和相对定位来实现。 方法三：通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。 我们可以这样理解：假想ul层的父层（即下面例子中的div层）中间有条平分线将ul层的父层（div层）平均分为两份，ul层的css代码是将ul层的最左端与ul层的父层（div层）的平分线对齐；而li层的css代码则是将li层的平分线与ul层的最左端（也是div层的平分线）对齐，从而实现li层的居中。 代码如下： 123456789&lt;body&gt;&lt;div class="container"&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;/body&gt; css代码： 1234567891011121314151617&lt;style&gt;.container&#123; float:left; position:relative; left:50%&#125;.container ul&#123; list-style:none; margin:0; padding:0; position:relative; left:-50%;&#125;.container li&#123;float:left;display:inline;margin-right:8px;&#125;&lt;/style&gt; 这三种方法使用得都非常广泛，各有优缺点，具体选用哪种方法，可以视具体情况而定。 已知宽度,通过设置position:absolute,margin-left为宽度的负一半12345678910.parent &#123; position: relative;&#125;.child &#123; position: absolute; left: 50%; width: 150px; margin-left: -75px;&#125; 未知宽度,通过设置position:absolute12345678910.parent &#123; position: relative;&#125; .child &#123; position: absolute; left: 50%; -webkit-transform: translateX(-50%); transform: translateX(-50%);&#125; 使用flex布局实现（兼容性不好，感觉有点变成浮动的效果，不在文档流）123456789101112131415/* 第一种： */.parent &#123; display: flex; justify-content: center;&#125;/* 第二种： */.parent &#123; display: flex;&#125;.child &#123; margin: 0 auto;&#125;]]></content>
      <categories>
        <category>HTML/CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[预留高度问题]]></title>
    <url>%2F2018%2F09%2F04%2F%E9%A2%84%E7%95%99%E9%AB%98%E5%BA%A6%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在display: block的块状宽度width固定为100% 而高度height则是随着内容的增加而自动增加，如果想要放置图片，给块预留高度，可以用以下方案解决： 1234567891011.parnet&#123; overflow:hidden; width:100%; height:0; padding-bottom:31.25%; /* 这里的padding-bottom是由子元素图片的高/宽之比算出来的 */ /* 如图片宽高 640px 200px 200÷640＝31.25% */&#125;.child-img&#123; width:100%;&#125; 还有一种方法，不过存在兼容性问题 123456789.parnet&#123; overflow:hidden; width:100%; height:31.25vw; /* 将高度设置为屏宽的31.25% */ &#125; .child-img&#123; width:100%; &#125;]]></content>
      <categories>
        <category>HTML/CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[垂直居中]]></title>
    <url>%2F2018%2F09%2F01%2F%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[垂直居中-父元素高度确定的单行文本 我们在实际工作中也会遇到需要设置垂直居中的场景，比如好多报纸的文章标题在左右一侧时，常常会设置为垂直居中，为了用户体验性好。 这里我们又得分两种情况：父元素高度确定的单行文本，以及父元素高度确定的多行文本。 本节我们先来看第一种父元素高度确定的单行文本, 怎么设置它为垂直居中呢？ 父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行的高度），指在文本中，行与行之间的 基线间的距离 )。 line-height 与 font-size 的计算值之差，在 CSS 中成为“行间距”。分为两半，分别加到一个文本行内容的顶部和底部。 这种文字行高与块高一致带来了一个弊端：当文字内容的长度大于块的宽时，就有内容脱离了块。 如下代码： 123&lt;div class="container"&gt; hi,imooc!&lt;/div&gt; css代码： 1234567&lt;style&gt;.container &#123; height: 100px; line-height: 100px; background: #999;&#125;&lt;/style&gt; 垂直居中-父元素高度确定的多行文本（方法一） 父元素高度确定的多行文本、图片等的竖直居中的方法有两种： 方法一：使用插入 table (包括tbody、tr、td)标签，同时设置 vertical-align：middle。 css 中有一个用于竖直居中的属性 vertical-align，在父元素设置此样式时，会对inline-block类型的子元素都有用。下面看一下例子： html代码： 12345678910111213&lt;body&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="wrap"&gt; &lt;div&gt; &lt;p&gt;看我是否可以居中。&lt;/p&gt; &lt;/div&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/body&gt; css代码： 1234table td &#123; height: 500px; background: #ccc; &#125; 因为 td 标签默认情况下就默认设置了 vertical-align 为 middle，所以我们不需要显式地设置了。 垂直居中-父元素高度确定的多行文本（方法二） 除了上一节讲到的插入table标签，可以使父元素高度确定的多行文本垂直居中之外，本节介绍另外一种实现这种效果的方法。但这种方法兼容性比较差，只是提供大家学习参考。 在 chrome、firefox 及 IE8 以上的浏览器下可以设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align 属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差。 html代码： 1234567&lt;div class="container"&gt; &lt;div&gt; &lt;p&gt;看我是否可以居中。&lt;/p&gt; &lt;p&gt;看我是否可以居中。&lt;/p&gt; &lt;p&gt;看我是否可以居中。&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; css代码： 12345678&lt;style&gt;.container&#123; height: 300px; background: #ccc; display: table-cell;/*IE8以上及Chrome、Firefox*/ vertical-align: middle;/*IE8以上及Chrome、Firefox*/&#125;&lt;/style&gt; 这种方法的好处是不用添加多余的无意义的标签，但缺点也很明显，它的兼容性不是很好，不兼容 IE6、7而且这样修改display的block变成了table-cell，破坏了原有的块状元素的性质。 未知高度，设置position:absolute 12345678910.parent &#123; position: relative; &#125;.child &#123; position: absolute; top: 50%; -webkit-transform: translateY(-50%); transform: translateY(-50%);&#125; 已知高度，设置position:absolute,margin-top为高度的负一半 12345678910.parent &#123; position: relative;&#125;.child &#123; position: absolute; top: 50%; height: 150px; margin-top: -75px;&#125; 使用flex布局实现 1234.parent &#123; display: flex; align-items: center;&#125;]]></content>
      <categories>
        <category>HTML/CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Relative与Absolute组合使用]]></title>
    <url>%2F2018%2F05%2F20%2FRelative%E4%B8%8EAbsolute%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[使用position:absolute可以实现被设置元素相对于浏览器(body) 设置定位以后，大家有没有想过可不可以相对于其它元素进行定位呢？答案是肯定的，当然可以。使用position:relative来帮忙，但是必须遵守下面规范： 参照定位的元素必须是相对定位元素的前辈元素： 123&lt;div id="box1"&gt;&lt;!--参照定位的元素--&gt; &lt;div id="box2"&gt;相对参照元素进行定位&lt;/div&gt;&lt;!--相对定位元素--&gt;&lt;/div&gt; 从上面代码可以看出box1是box2的父元素（父元素当然也是前辈元素了）。 参照定位的元素必须加入position:relative 12345#box1&#123; width:200px; height:200px; position:relative; &#125; 定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了。 12345#box2&#123; position:absolute; top:20px; left:30px; &#125; 这样box2就可以相对于父元素box1定位了（这里注意参照物就可以不是浏览器了，而可以自由设置了）。]]></content>
      <categories>
        <category>HTML/CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
